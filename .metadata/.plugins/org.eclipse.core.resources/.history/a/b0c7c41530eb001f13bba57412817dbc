package Sorting;
import java.util.Arrays;

public class MergeSort {
	
	public static void merge(int[] arr, int low, int high, int mid) {
	    int i = low;        // Left subarray pointer
	    int j = mid + 1;    // Right subarray pointer
	    int k = 0;          // Pointer for temp array
	    int[] temp = new int[high - low + 1];  // Temporary array

	    // Merge elements into temp[]
	    while (i <= mid && j <= high) {
	        if (arr[i] <= arr[j]) {
	            temp[k++] = arr[i++];  // Copy arr[i] and move i forward
	        } else {
	            temp[k++] = arr[j++];  // Copy arr[j] and move j forward
	        }
	    }

	    // Copy any remaining elements from the left subarray
	    while (i <= mid) {
	        temp[k++] = arr[i++];
	    }

	    // Copy any remaining elements from the right subarray
	    while (j <= high) {
	        temp[k++] = arr[j++];
	    }

	    // Copy sorted temp array back to original arr
	    for (int x = 0; x < temp.length; x++) {
	        arr[low + x] = temp[x];
	    }
	}

	
	public static int[] mergeSort(int[] arr, int low, int high) {
		
		if(arr.length<=1) {
			return arr;
		}
		
		int mid = (low+high)/2;
		mergeSort(arr, low, mid);
		mergeSort(arr, mid+1, high);
		merge(arr, low, high, mid);
	}

	public static void main(String[] args) {
		
		int arr[] = {3, 1, 2, 4, 1, 5, 2, 6, 4};
		mergeSort(arr, 0, arr.length-1);
		System.out.println("Sorted Array: " + Arrays.toString(arr));
	}
}
