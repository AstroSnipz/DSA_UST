package InsertionLL;

class Node{
	int data;
	Node next;
	
	Node(int data, Node next){
		this.data = data;
		this.next = next;
	}
	
	Node(int data){
		this.data = data;
		this.next = null;
	}
}

public class InsertionLinkedList {
	
	public static void Traversal(Node head) {
		Node temp = head;
		while(temp!=null) {
			System.out.print(temp.data+" ");
			temp = temp.next;
		}
	}
	
	public static Node convertArr2LL(int[] arr) {
		Node head = new Node(arr[0]);
		Node mover = head;
		for(int i=1; i<arr.length; i++) {
			Node temp = new Node(arr[i]);
			mover.next = temp;
			mover = temp;
		}
		return head;
	}
	
	// Inserting at the head of LinkedList
	public static Node InsertionAtHead(Node head, int val) {
		Node temp = new Node(val, head);
		return temp;
	}
	
	// Insertion at the Tail of LinkedList
	public static Node InsertionAtTail(Node head, int val) {
		Node tail = new Node(val);
		if(head==null) {
			return tail;
		}
		Node temp = head;
		while(temp.next!=null) {
			temp = temp.next;
		}
		temp.next = tail;
		return head;
	}
	
	// Insertion at the Kth element
	public static Node InsertionAtK(Node head, int val, int k) {
		Node newNode = new Node(val);
		if(head==null) {
			return newNode;
		}
		
		if(k==1) {
			newNode.next = head;
			return newNode;
		}
		
		Node temp = head;
		int count = 0;
		Node prev = null;
		while(temp!=null) {
			count++;
			if(count==k) {
				prev.next = newNode;
				newNode.next = temp;
			}
			prev = temp;
			temp = temp.next;
		}
		return head;
	}

	public static void main(String[] args) {
		
		int[] arr = {12, 5, 6, 8};
		Node head = convertArr2LL(arr);
//		Traversal(head);
//		head = InsertionAtHead(head, 7);
//		head = InsertionAtTail(head, 7);
		head = InsertionAtK(head, 9, 5);
		Traversal(head);
		
	}

}
